
Version: 2.0.0-beta.6
Deployment
To build the static files of your website for production, run:

npm
Yarn
npm run build
Once it finishes, the static files will be generated within the build directory.

NOTE
The only responsibility of Docusaurus is to build your site and emit static files in build.

It is now up to you to choose how to host those static files.

You can deploy your site to static site hosting services such as Vercel, GitHub Pages, Netlify, Render, Surge...

A Docusaurus site is statically rendered, and it can generally work without JavaScript!

Testing your Build Locally#
It is important to test your build locally before deploying to production.

Docusaurus includes a docusaurus serve command for that:

npm
Yarn
npm run serve
Trailing slash configuration#
Docusaurus has a trailingSlash config, to allow customizing URLs/links and emitted filename patterns.

The default value generally works fine.

Unfortunately, each static hosting provider has a different behavior, and deploying the exact same site to various hosts can lead to distinct results.

Depending on your host, it can be useful to change this config.

TIP
Use slorber/trailing-slash-guide to understand better the behavior of your host and configure trailingSlash appropriately.

Self-Hosting#
Docusaurus can be self-hosted using docusaurus serve. Change port using --port and --host to change host.

npm
Yarn
npm run serve -- --build --port 80 --host 0.0.0.0
WARNING
It is not the best option, compared to a static hosting provider / CDN.

Deploying to GitHub Pages#
Docusaurus provides an easy way to publish to GitHub Pages. Which is hosting that comes for free with every GitHub repository.

docusaurus.config.js settings#
First, modify your docusaurus.config.js and add the required params:

Name	Description
organizationName	The GitHub user or organization that owns the repository. If you are the owner, it is your GitHub username. In the case of Docusaurus, it is "facebook" which is the GitHub organization that owns Docusaurus.
projectName	The name of the GitHub repository. For example, the repository name for Docusaurus is "docusaurus", so the project name is "docusaurus".
url	URL for your GitHub Page's user/organization page. This is commonly https://_username_.github.io.
baseUrl	Base URL for your project. For projects hosted on GitHub pages, it follows the format "/projectName/". For https://github.com/facebook/docusaurus, baseUrl is /docusaurus/.
INFO
In case you want to use your custom domain for GitHub Pages, create a CNAME file in the static directory. Anything within the static directory will be copied to the root of the build directory for deployment.

When using a custom domain, you should be able to move back from baseUrl: '/projectName/' to baseUrl: '/'

You may refer to GitHub Pages' documentation User, Organization, and Project Pages for more details.

CAUTION
GitHub Pages adds a trailing slash to Docusaurus URLs by default. It is recommended to set a trailingSlash config (true or false, not undefined).

Example:

docusaurus.config.js
module.exports = {
  // ...
  url: 'https://endiliey.github.io', // Your website URL
  baseUrl: '/',
  projectName: 'endiliey.github.io',
  organizationName: 'endiliey',
  trailingSlash: false,
  // ...
};
WARNING
By default, GitHub Pages runs published files through Jekyll. Since Jekyll will discard any files that begin with _, it is recommended that you disable Jekyll by adding an empty file named .nojekyll file to your static directory.

Environment settings#
Specify the Git user as an environment variable.

Name	Description
GIT_USER	The username for a GitHub account that has commit access to this repo. For your own repositories, this will usually be your GitHub username. The specified GIT_USER must have push access to the repository specified in the combination of organizationName and projectName.
Optional parameters, also set as environment variables:

Name	Description
USE_SSH	Set to true to use SSH instead of the default HTTPS for the connection to the GitHub repo.
DEPLOYMENT_BRANCH	The branch that the website will be deployed to, defaults to gh-pages. For GitHub Pages Organization repos (config.projectName ending in github.io), this env variable is required.
CURRENT_BRANCH	The branch that contains the latest docs changes that will be deployed. Usually, the branch will be main, but it could be any branch (default or otherwise) except for gh-pages. If nothing is set for this variable, then the current branch will be used.
GIT_PASS	Password (or token) of the git user (specified by GIT_USER). For example, to facilitate non-interactive deployment (e.g. continuous deployment)
GitHub enterprise installations should work in the same manner as github.com; you only need to set the organization's GitHub Enterprise host as an environment variable:

Name	Description
GITHUB_HOST	The domain name of your GitHub enterprise site.
GITHUB_PORT	The port of your GitHub enterprise site.
Deploy#
Finally, to deploy your site to GitHub Pages, run:

Bash
Windows
PowerShell
GIT_USER=<GITHUB_USERNAME> yarn deploy
Triggering deployment with GitHub Actions#
GitHub Actions allow you to automate, customize, and execute your software development workflows right in your repository.

This workflow assumes your documentation resided in documentation branch of your repository and your publishing source is configured for gh-pages branch.

Generate a new SSH key.
By default, your public key should have been created in ~/.ssh/id_rsa.pub or use the name you've provided in the previous step to add your key to GitHub deploy keys.
Copy key to clipboard with xclip -sel clip < ~/.ssh/id_rsa.pub and paste it as a deploy key in your repository. Copy file content if the command line doesn't work for you. Check the box for Allow write access before saving your deployment key.
You'll need your private key as a GitHub secret to allow Docusaurus to run the deployment for you.
Copy your private key with xclip -sel clip < ~/.ssh/id_rsa and paste a GitHub secret with name GH_PAGES_DEPLOY. Copy file content if the command line doesn't work for you. Save your secret.
Create your documentation workflow file in .github/workflows/. In this example it's documentation.yml.
WARNING
Please make sure that you replace actions@github.com with your GitHub email and gh-actions with your name.

documentation.yml
name: deploydocs

on:
  pull_request:
    branches: [master]
  push:
    branches: [master]

jobs:
  checks:
    if: github.event_name != 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - name: Test Build
        run: |
          if [ -e yarn.lock ]; then
            yarn install --frozen-lockfile
          elif [ -e package-lock.json ]; then
            npm ci
          else
            npm i
          fi
          npm run build
  gh-release:
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - uses: webfactory/ssh-agent@v0.5.0
        with:
          ssh-private-key: ${{ secrets.GH_PAGES_DEPLOY }}
      - name: Release to GitHub Pages
        env:
          USE_SSH: true
          GIT_USER: git
        run: |
          git config --global user.email "bildungsraum@janrenz.de"
          git config --global user.name "janrenz
          if [ -e yarn.lock ]; then
            yarn install --frozen-lockfile
          elif [ -e package-lock.json ]; then
            npm ci
          else
            npm i
          fi
          npm run deploy